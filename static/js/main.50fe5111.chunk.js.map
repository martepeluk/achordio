{"version":3,"sources":["chords/chord.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Chord","props","chordList","notes","map","note","className","noteValueToString","0","1","2","3","4","5","6","7","8","9","10","11","App","state","baseNote","sharp","onChangeNote","bind","onChangeSharp","calculateChordFromBaseNote","event","noteValue","target","value","this","setState","sharpValue","onChange","type","name","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAgBeA,MAbf,SAAeC,GACX,IACMC,EADQD,EAAME,MACIC,KAAI,SAACC,GAAD,OAAkB,6BACzCA,GADkDA,MAIvD,OACI,8BACI,oBAAIC,UAAU,aAAd,SAA4BJ,OCPlCK,EAA4C,CAChDC,EAAG,IACHC,EAAG,KACHC,EAAG,IACHC,EAAG,KACHC,EAAG,IACHC,EAAG,IACHC,EAAG,KACHC,EAAG,IACHC,EAAG,KACHC,EAAG,IACHC,GAAI,KACJC,GAAI,KA2ESC,E,kDAxDb,WAAYnB,GAAa,IAAD,8BACtB,cAAMA,IACDoB,MAAQ,CACXC,UAAW,EACXC,MAAO,GAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,2BAA6B,EAAKA,2BAA2BF,KAAhC,gBARZ,E,gDAWxB,SAAaG,GACX,IAAIC,GAAqBD,EAAME,OAAOC,MACtCC,KAAKC,SAAS,CAACX,SAAWO,EAAWN,MAAQS,KAAKX,MAAME,U,2BAG1D,SAAcK,GACZ,IAAIM,GAAsBN,EAAME,OAAOC,MACvCC,KAAKC,SAAS,CAACX,SAAWU,KAAKX,MAAMC,SAAUC,MAAQW,M,wCAGzD,WACE,GAAIF,KAAKX,MAAMC,SAAW,EACxB,MAAO,GAET,IAAIA,GAAoBU,KAAKX,MAAMC,SAAWU,KAAKX,MAAME,MAAQ,IAAM,GAGvE,MAD+B,CAAChB,EAAkBe,EAAW,IAAKf,GAAmBe,EAAW,GAAK,IAAKf,GAAmBe,EAAW,GAAK,IAAKf,GAAmBe,EAAW,IAAM,O,oBAIxL,WACE,OACE,sBAAKhB,UAAU,MAAf,UACE,sBAAK6B,SAAUH,KAAKR,aAApB,UACE,uBAAOY,KAAK,QAAQL,MAAM,IAAIM,KAAK,SADrC,KAEE,uBAAOD,KAAK,QAAQL,MAAM,IAAIM,KAAK,SAFrC,KAGE,uBAAOD,KAAK,QAAQL,MAAM,IAAIM,KAAK,SAHrC,KAIE,uBAAOD,KAAK,QAAQL,MAAM,IAAIM,KAAK,SAJrC,KAKE,uBAAOD,KAAK,QAAQL,MAAM,IAAIM,KAAK,SALrC,KAME,uBAAOD,KAAK,QAAQL,MAAM,IAAIM,KAAK,SANrC,KAOE,uBAAOD,KAAK,QAAQL,MAAM,KAAKM,KAAK,SAPtC,QAUA,sBAAKF,SAAUH,KAAKN,cAApB,UACE,uBAAOU,KAAK,QAAQL,MAAM,IAAIM,KAAK,UADrC,KAEE,uBAAOD,KAAK,QAAQL,MAAM,IAAIM,KAAK,UAFrC,QAGE,uBAAOD,KAAK,QAAQL,MAAM,KAAKM,KAAK,UAHtC,QAMA,cAAC,EAAD,CAAOlC,MAAO6B,KAAKL,sC,GAnDTW,IAAMC,WCpBTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.50fe5111.chunk.js","sourcesContent":["import React from 'react';\nimport './chord.css'\n\nfunction Chord(props: any) {\n    const notes = props.notes;\n    const chordList = notes.map((note: string) => <li key={note}>\n        {note}\n    </li>\n    );\n    return (\n        <div>\n            <ul className=\"chord-list\">{chordList}</ul>\n        </div>\n    );\n}\n\nexport default Chord;","import React from 'react';\nimport './App.css';\nimport Chord from './chords/chord';\n\nconst noteValueToString: Record<number, string> = {\n  0: 'C',\n  1: 'C#',\n  2: 'D',\n  3: 'D#',\n  4: 'E',\n  5: 'F',\n  6: 'F#',\n  7: 'G',\n  8: 'G#',\n  9: 'A',\n  10: 'A#',\n  11: 'H'\n}\n\nconst noteStringToValue: Record<string, number> = {\n  'C': 0,\n  'C#': 1,\n  'D': 2,\n  'D#': 3,\n  'E': 4,\n  'F': 5,\n  'F#': 6,\n  'G': 7,\n  'G#': 8,\n  'A': 9,\n  'A#': 10,\n  'H': 11\n}\n\nclass App extends React.Component<{}, {baseNote: number, sharp: number}> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      baseNote: -1,\n      sharp: 0\n    };\n    this.onChangeNote = this.onChangeNote.bind(this);\n    this.onChangeSharp = this.onChangeSharp.bind(this);\n    this.calculateChordFromBaseNote = this.calculateChordFromBaseNote.bind(this);\n  }\n\n  onChangeNote(event: any) {\n    var noteValue: number = +event.target.value;\n    this.setState({baseNote : noteValue, sharp : this.state.sharp});\n  }\n\n  onChangeSharp(event: any) {\n    var sharpValue: number = +event.target.value;\n    this.setState({baseNote : this.state.baseNote, sharp : sharpValue});\n  }\n\n  calculateChordFromBaseNote(): string[] {\n    if (this.state.baseNote < 0) {\n      return [];\n    }\n    var baseNote: number = (this.state.baseNote + this.state.sharp + 12) % 12;\n\n    var noteStringList: string[] = [noteValueToString[baseNote % 12], noteValueToString[(baseNote + 4) % 12], noteValueToString[(baseNote + 7) % 12], noteValueToString[(baseNote + 11) % 12]];\n    return noteStringList;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div onChange={this.onChangeNote}>\n          <input type=\"radio\" value=\"0\" name=\"note\" /> C\n          <input type=\"radio\" value=\"2\" name=\"note\" /> D\n          <input type=\"radio\" value=\"4\" name=\"note\" /> E\n          <input type=\"radio\" value=\"5\" name=\"note\" /> F\n          <input type=\"radio\" value=\"7\" name=\"note\" /> G\n          <input type=\"radio\" value=\"9\" name=\"note\" /> A\n          <input type=\"radio\" value=\"11\" name=\"note\" /> H\n        </div>\n\n        <div onChange={this.onChangeSharp}>\n          <input type=\"radio\" value=\"1\" name=\"sharp\" /> #\n          <input type=\"radio\" value=\"0\" name=\"sharp\" /> none\n          <input type=\"radio\" value=\"-1\" name=\"sharp\" /> b\n        </div>\n\n        <Chord notes={this.calculateChordFromBaseNote()}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}